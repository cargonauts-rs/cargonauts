use ast::*;

grammar;

pub routes: Routes = {
    <setup:Setup?> <resources:Resource*> => Routes { setup, resources }
};

Setup: Setup = {
    "setup" "{" <members:SetupMember*> "}" => Setup { members, },
};

SetupMember: SetupMember = {
    "client" <Client> ";" => SetupMember::Client(<>),
};

Client: Client = {
    "for" <conn:Ident> => Client { conn, wrapper: None },
    "for" <conn:Ident> "as" <wrapper:Ident> => Client { conn, wrapper: Some(wrapper) },
};

Resource: Resource = {
    <attrs:Attribute*> <header:ResourceHeader> ";" => Resource {
        attrs, header, members: vec![],
    },
    <attrs:Attribute*> <header:ResourceHeader> "{" <members:ResourceMember*> "}" => Resource {
        attrs, header, members,
    },
};

ResourceHeader: ResourceHeader  = {
    "resource" <ty:Ident> <endpoint:Endpoint?> => ResourceHeader { ty, endpoint },
};

Endpoint: String = "@" <String>;

ResourceMember: ResourceMember = {
    "relation" <Relation> => ResourceMember::Relation(<>),
    "method" <Method> => ResourceMember::Method(<>),
};

Relation: Relation = {
    <attrs:Attribute*> <rel:Ident> <endpoint:Endpoint?> ";" => Relation {
        attrs, rel, endpoint, members: vec![],
    },
    <attrs:Attribute*> <rel:Ident> <endpoint:Endpoint?> "{" <members:RelationMember*> "}" => Relation {
        attrs, rel, endpoint, members,
    },
};

RelationMember: RelationMember = {
    "method" <Method> => RelationMember::Method(<>),
};

Method: Method = {
    <attrs:Attribute*> <method:Ident> "in" <format:Ident> ";" => Method {
        attrs, method, format,
    }
};

Ident: String = {
    r"[A-Za-z][A-Za-z0-9_]*" => String::from(<>)
};

String: String = {
    <s:r#""(?:[^"\\]|\\.)*""#> => {
        let last = s.len() - 1;
        String::from(&s[1..last])
    },
};

Attribute: Attribute = {
    "#" "[" <id: Ident> "(" <idents:RepeatWith<Ident, ",">> ")" "]"
        => Attribute::Arg(id, idents),
    "#" "[" <Ident> "]"
        => Attribute::Ident(<>),
};

RepeatWith<T, X>: Vec<T> = {
    <v:(<T> X)*> <e:T?> => match e {
       None => v,
       Some(e) => {
           let mut v = v;
           v.push(e);
           v
       }
   }
};
