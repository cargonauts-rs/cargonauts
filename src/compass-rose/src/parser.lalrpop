use heck::KebabCase;

use ast::*;

grammar;

pub routes: Routes = {
    <asset_handler:AssetHandler?> <setup:Setup?> <route_items:RouteItem*>
        => Routes { asset_handler, setup, route_items },
};

AssetHandler: String = {
    "use" <Ident> "for" "assets" ";" => <>,
};

Setup: Setup = {
    "setup" "{" <members:SetupMember*> "}" => Setup { members, },
};

SetupMember: SetupMember = {
    "connection" <Connection> => SetupMember::Connection(<>),
};

Connection: Connection = {
    "to" <conn:Ident> ";" => Connection { name: conn.to_kebab_case(), conn },
    "to" <conn:Ident> "as" <name:String> ";" => Connection { conn, name },
};

RouteItem: RouteItem = {
    "mod" <name:Ident> "{" <items:RouteItem*> "}" => RouteItem::Module(name, items),
    <Resource> => RouteItem::Resource(<>),
};

Resource: Resource = {
    <attrs:Attribute*> <header:ResourceHeader> ";" => Resource {
        attrs, header, members: vec![],
    },
    <attrs:Attribute*> <header:ResourceHeader> "{" <members:ResourceMember*> "}" => Resource {
        attrs, header, members,
    },
};

ResourceHeader: ResourceHeader  = {
    "resource" <ty:Ident> <endpoint:Endpoint?> => ResourceHeader { ty, endpoint },
};

Endpoint: String = "as" <String>;

ResourceMember: ResourceMember = {
    <attrs:Attribute*> "has" <rel:Relation> => ResourceMember::Relation(rel, attrs),
    <attrs:Attribute*> "method" <method:Method> => ResourceMember::Method(method, attrs),
};

Relation: Relation = {
    <kind:RelationKind> <rel:Ident> <endpoint:Endpoint?> ";" => Relation {
        kind, rel, endpoint, members: vec![],
    },
    <kind:RelationKind> <rel:Ident> <endpoint:Endpoint?> "{" <members:RelationMember*> "}" => Relation {
        kind, rel, endpoint, members,
    },
};

RelationKind: RelationKind = {
    "one" => RelationKind::Single,
    "many" => RelationKind::Many,
};

RelationMember: RelationMember = {
    <attrs:Attribute*> "method" <method:Method> => RelationMember::Method(method, attrs),
};

Method: Method = {
    <methods:Comma<Ident>> "in" <format:Ident> ";" => Method {
        methods, format,
    }
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Ident: String = {
    r"[A-Za-z][A-Za-z0-9_]*" => String::from(<>)
};

String: String = {
    <s:r#""(?:[^"\\]|\\.)*""#> => {
        let last = s.len() - 1;
        String::from(&s[1..last])
    },
};

Attribute: Attribute = {
    "#" "[" <id: Ident> "(" <idents:RepeatWith<Ident, ",">> ")" "]"
        => Attribute::Arg(id, idents),
    "#" "[" <Ident> "]"
        => Attribute::Ident(<>),
};

RepeatWith<T, X>: Vec<T> = {
    <v:(<T> X)*> <e:T?> => match e {
       None => v,
       Some(e) => {
           let mut v = v;
           v.push(e);
           v
       }
   }
};
